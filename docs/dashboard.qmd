---
title: "Dashboard"
format: html
server: shiny
echo: false
warning: false
message: false
---

```{r setup}
# load target objects
library(tidyverse)
library(ggdist)

plot_data <- readRDS(here::here("docs", "plot_data.rds"))

# set ggplot theme and colour palette
theme_set(theme_ggdist() + 
		  	theme(text = element_text(size = 15),
		  		  legend.position = "top",
		  		  legend.key = element_rect(fill = NA),
		  		  legend.title = element_text(size = 10),
		  		  axis.text.x = element_text(size = 6.5),
		  		  axis.text.y = element_text(size = 4.5),
		  		  panel.border = element_rect(fill = NA, colour = "grey"),
		  		  panel.grid.major.x = element_line(colour = "grey", 
		  		  								  linetype = "dotted",
		  		  								  linewidth = 0.25),
		  		  plot.title = element_text(size = 10),
		  		  strip.text = element_text(size = 6),
		  		  strip.background = element_rect(fill = "white",
		  		  								colour = NA),
		  		  strip.text.y = element_text(angle = 0))) 

clrs <- c("#003f5c", "#58508d", "#bc5090", "#ff6361", "#ffa600")

options(ggplot2.ordinal.fill = clrs[c(1, 4, 5)],
		ggplot2.ordinal.colour = clrs[c(1, 4, 5)],
		ggplot2.discrete.fill = clrs[c(1, 4, 5)],
		ggplot2.discrete.colour = clrs[c(1, 4, 5)],
		ggplot2.continuous.fill = ggplot2::scale_color_gradient,
		ggplot2.continuous.colour = ggplot2::scale_color_gradient)
```

## Eye-tracker data

This visualisation shows participants gaze coordinates in the X and Y dimensions across the time course of each trial. Black points indicate observed samples, while red points indicate imputed samples. Grey rectangles indicate the coordinates of the areas of interest in the trial phase displayed: `center` during the prime phase, and `right` (top) and `left` (bottom) in the test phase. Gaze samples within X and Y AOI coordinates indicate that the participant was fixating such AOI at that specific time point. The location of the target picture during the test phase in each trial is indicated with a capital *T* within the AOI rectangle.

```{r prepare-input}
#| eval: true
#| panel: sidebar
id_age_group_choices <- unique(plot_data$id_age_group, decreasing = TRUE)

selectInput("id_age_group", "Participant", 
			choices = id_age_group_choices,
			selected = last(id_age_group_choices))

selectInput("trial", "Trial", 
			choices = 1:32,
			selected = 1)

selectInput("phase", "Trial phase", 
			choices = c("Prime" = "Prime", 
						"Test" = "Target"),
			selected = "Target")

textOutput("gaze_plot_valid_phase")
textOutput("gaze_plot_valid_gaze")
textOutput("gaze_plot_valid_vocab")
textOutput("gaze_plot_valid_trial")
textOutput("gaze_plot_valid_participant")

```

```{r show-output}
#| eval: true
#| panel: fill
plotOutput("gaze_plot")
```

```{r}
#| context: server
#| standalone: true
#| fig-width: 7
#| fig-height: 4
output$gaze_plot_valid_phase <- renderText({
	value <- selectedData() |> 
		filter(dim=="x",
			   timestamp==0) |> 
		mutate(is_phase_valid = case_when(
			is_phase_valid ~ "Valid phase",
			!is_phase_valid ~ "Invalid phase")
		) |> 
		pull(is_phase_valid)
})

output$gaze_plot_valid_gaze <- renderText({
	value <- selectedData() |> 
		filter(dim=="x",
			   timestamp==0) |> 
		mutate(is_valid_gaze = case_when(
			is_valid_gaze ~ "Valid gaze",
			!is_valid_gaze ~ "Invalid gaze")
		) |> 
		pull(is_valid_gaze)
	
})

output$gaze_plot_valid_vocab <- renderText({
	value <- selectedData() |> 
		filter(dim=="x",
			   timestamp==0) |> 
		mutate(is_valid_vocab = case_when(
			is_valid_vocab ~ "Valid vocabulary",
			!is_valid_vocab ~ "Invalid vocabulary",
			is.na(is_valid_vocab) ~ "Missing vocabulary")
		) |> 
		pull(is_valid_vocab)
	
})

output$gaze_plot_valid_trial <- renderText({
	value <- selectedData() |> 
		filter(dim=="x",
			   timestamp==0) |>
		mutate(is_valid_trial = case_when(
			is_valid_trial ~ "Valid trial",
			!is_valid_trial ~ "Invalid trial",
			is.na(is_valid_trial) ~ "Invalid trial")) |> 
		pull(is_valid_trial) 
	
})

output$gaze_plot_valid_participant <- renderText({
	selectedData() |> 
		filter(dim=="x") |> 
		distinct(is_valid_participant) |> 
		mutate(is_valid_participant = case_when(
			is_valid_participant ~ "Valid participant",
			!is_valid_participant ~ "Excluded participant")) |> 
		pull(is_valid_participant)
	
})

aoi_coords <- list(center = c(xmin = 710, xmax = 1210, ymin = 290, ymax = 790),
				   left = c(xmin = 180, xmax = 680, ymin = 290, ymax = 790),
				   right = c(xmin = 1240, xmax = 1740, ymin = 290, ymax = 790))

get_aois_viz <- function(aoi_coords) {
	ymin_coords <- c(
		aoi_coords$center["xmin"], 
		aoi_coords$center["ymin"], 
		aoi_coords$right["xmin"], 
		aoi_coords$right["ymin"], 
		aoi_coords$left["xmin"], 
		aoi_coords$left["ymin"]
	)
	
	ymax_coords <- c(
		aoi_coords$center["xmax"],
		aoi_coords$center["ymax"],
		aoi_coords$right["xmax"],
		aoi_coords$right["ymax"],
		aoi_coords$left["xmax"],
		aoi_coords$left["ymax"]
	)
	
	aois <- tibble(
		phase = rep(c("Prime", "Target", "Target"), each = 2),
		dim = rep(c("x", "y"), each = 1, times = 3),
		xmin = -Inf,
		xmax = -Inf,
		ymin = ymin_coords,
		ymax = ymax_coords
	) |> 
		distinct(pick(everything()))
	
	aois$phase_dim <- paste0(aois$phase, " - ", aois$dim)
	
	return(aois)
}

aois <- get_aois_viz(aoi_coords)

dummy_data <- tibble(dim = c("x", "y"),
					 ymin = c(0, 0),
					 ymax = c(1920, 1080)) |> 
	expand_grid(phase = c("Prime", "Target")) |> 
	mutate(phase_dim = paste0(phase, " - ", dim))

selectedData <- reactive({
	rowindex <- which(plot_data$id_age_group==input$id_age_group &
					  	plot_data$trial==as.integer(input$trial) &
					  	plot_data$phase==input$phase)
	plot_data[rowindex, ] 
	# filter(id_age_group=="100 (30 months)",
	# 	   trial==as.integer("1"),
	# 	   phase=="Target") |> 
})

output$gaze_plot <- renderPlot({
	
	
	ggplot(selectedData(),
		   aes(x = timestamp,
		   	y = value, 
		   	colour = is_imputed)) + 
		facet_wrap(~ dim,
				   ncol = 1,
				   scales = "free_y",
				   labeller = label_wrap_gen(multi_line = FALSE)) +
		geom_blank(data = dummy_data,
				   aes(xmin = 0,
				   	xmax = 2,
				   	ymin = ymin,
				   	ymax = ymax),
				   inherit.aes = FALSE) + 
		geom_vline(xintercept = 0.3, 
				   linewidth = 0.25,
				   colour = "grey") +
		geom_rug(data = filter(selectedData(), 
							   is_gaze_target,
							   phase=="Target"),
				 length = unit(0.1, "cm"),
				 sides = "t",
				 colour = "mediumspringgreen") +
		geom_rug(data = filter(selectedData(), 
							   is_gaze_distractor,
							   phase=="Target"),
				 length = unit(0.05, "cm"),
				 sides = "b",
				 colour = "mediumspringgreen") +
		geom_rect(data = filter(aois, phase==input$phase),
				  aes(xmin = -Inf,
				  	xmax = Inf,
				  	ymin = ymin,
				  	ymax = ymax),
				  alpha = 0.25, 
				  colour = NA,
				  inherit.aes = FALSE) +
		geom_text(aes(x = 0, 
					  y = target_y,
					  label = "T"),
				  na.rm = TRUE,
				  colour = "grey50",
				  size = 5,
				  hjust = 0.5) +
		geom_point(size = 2,
				   shape = 20, 
				   alpha = 0.5,
				   na.rm = TRUE) +
		labs(x = "Time (ms)",
			 y = "Gaze position in screen",
			 colour = "Imputed?") +
		theme_ggdist() +
		scale_colour_manual(values = c("black", "red")) +
		scale_y_continuous(breaks = c(aoi_coords$left[["xmin"]],
									  aoi_coords$left[["xmax"]],
									  aoi_coords$right[["xmin"]],
									  aoi_coords$right[["xmax"]])) +
		scale_x_continuous(limits = c(0, 2),
						   breaks = seq(0, 2, 0.5),
						   labels = function(x) {
						   	format(x * 1000,
						   		   big.mark = ",",
						   		   scientific = FALSE)
						   },
						   sec.axis = dup_axis()) +
		guides(colour = guide_legend(override.aes = list(alpha = 1,
														 size = 3)))
	
})
```
