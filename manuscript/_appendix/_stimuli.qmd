---
---

```{r stimuli-values}
n_words <- stimuli |>
	filter(test_language=="English") |> 
	select(prime, target, distractor) |> 
	unlist() |> 
	n_distinct()
```

We used `r n_words` distinct words to create the stimuli lists. We created four stimuli lists of 32 trials, each trial involving a prime-target-distractor triplet. Words played a role as primes *or* targets/distractors across the three lists in their corresponding language. For instance, the word *boot* appeared as *prime* in the three lists, but never as *target* or *distractor*; the word *bird* appeared as *target* and *distractor* across the three lists, but never as a prime. Target-distractor pairings were held constant across the three lists in each language. For instance, in all Catalan lists the word *bird* was paired with the word *milk*. Target-distractor pairings were also yoked, so that each member of the same target-distractor pair appeared once as target and once as distractor in each list. For instance, the *bird*-*milk* pair appeared twice in each of the four lists: once with *bird* as target and *milk* as distractor, and once with *milk* as target and *bird* as distractor. This counterbalancing avoided participants encountering looking at the target word guided solely by that word having being named in a previous trial. Finally, prime words appeared only once in each list: each target-distractor pair was associated with a different prime word in both appearances. Across lists, the same prime word was presented alongside a different target-distractor pair. For instance, the prime word *boot* was presented with the *bird*-*milk* target-distractor pair in the first list, with the *bucket*-*mouse* pair the second list, with *balloon*-*snail* in the third list, and with *bread*-*fish* in the fourth list. To avoid competition between target and distractor pictures, semantically related target-distractor pairs were perceptually distinct [@floccia2020translation; @arias2009lexical]. The order of the trials was randomised across experimental sessions, so that each time a participant was tested, the order in which the prime-target-distractor was presented was random. Each participant was randomly assigned to one of the three lists in the corresponding (dominant) language, and always the same list across their experimental sessions in the case of a recurrent participant. The position of the target and distractor pictures (right or left) for each target-distractor pair was alternated, so that in one list the target would appear on the left, in another list it would appear on the right, and so on.

The speaker was presented with a list of words in Catalan. The order of the words was pseudo-randomised, and each word was produced three times in a row before moving to the next word in the list. After going through all the words in the list, the speaker went through the word list again generating three tokens for each word, now in an inverse order (from bottom of the list to the top). We then repeated the same procedure for the list of Spanish words. The resulting audios were manually chunked into individual word-forms. For each of the six tokens produced for each word, the most adequate was selected for further processing. The audios were then transformed to stereo by duplicating them into two channels, denoised, and finally normalised. The mean duration of the final audios was `r round(mean(stimuli$duration[stimuli$test_language=="Catalan"]), 2)` (*SD* = `r round(sd(stimuli$duration[stimuli$test_language=="Catalan"]), 2)`) and `r round(mean(stimuli$duration[stimuli$test_language=="Spanish"]), 2)` (*SD* = `r round(sd(stimuli$duration[stimuli$test_language=="Spanish"]), 2)`) seconds for the Catalan and Spanish lists.

To make the pronunciation of the words as familiar as possible to each infant, we generated additional pronunciation variants for some words in Catalan and Spanish. Catalan words involving the /\textipa{L}/ phoneme in their Central Catalan variant (e.g., /\textipa{'Lu.n@}) were also recorded with such phoneme replaced by /j/ (e.g., /\textipa{'ju.n@}), a phonological process common in the Metropolitan Area of Barcelona. Spanish words involving the /\textipa{T}/ phoneme were also generated replacing such phoneme with /\textipa{s}/ to better accommodate Latin variants of Spanish. Before every experimental session, caregivers were asked to utter three written words involving the /\textipa{L}/ phoneme (in the case of participants tested in Catalan) or the /\textipa{T}/ phoneme (in the case of participants tested in Spanish). Each token contained the critical phoneme at onset, inter-vocalic position, and coda. The experimenter assigned the participant to the Catalan or Spanish stimuli list involving the closest variant to that of caregivers'.

```{r tbl-stimuli}
#| label: tbl-stimuli
#| tbl-cap: "Summary of stimuli properties by trial type."
stimuli |>
	unnest_wider(c(freq, nphon)) |>
	summarise(across(c(matches("n_phon|freq_|lv_|nphon"), duration),
					 list(	mean = \(x) mean(x, na.rm = TRUE),
					 	  sd = \(x) sd(x, na.rm = TRUE))),
			  .by = c(trial_type, test_language)) |>
	select(-matches("distractor")) |>
	mutate(test_language = if_else(test_language=="English",
								   paste0("Study 1: ", test_language),
								   paste0("Study 2: ", test_language))) |>
	arrange(test_language) |> 
	gt(rowname_col = "trial_type",
	   groupname_col = "test_language") |>
	# summary_rows(groups = c("Unrelated", "Non-cognate", "Cognate"),
	# 			 columns = is.numeric,
	# 			 fns = list(Total ~ mean(.)),
	# 			 fmt = ~ fmt_number(., decimals = 2)) |>
	grand_summary_rows(	columns = is.numeric,
						fns = list(Total ~ mean(.)),
						fmt = ~ fmt_number(., decimals = 2)) |>
	tab_spanner("Phonemes", matches("nphon")) |>
	tab_spanner("Frequency (Zipf)", matches("freq")) |>
	tab_spanner("Phon. similarity [0-1]", matches("lv")) |>
	fmt_number(is.numeric, decimals = 1) |>
	cols_merge(c(freq_prime_mean, freq_prime_sd),
			   pattern = "{1} ({2})") |>
	cols_merge(c(freq_target_mean, freq_target_sd),
			   pattern = "{1} ({2})") |>
	cols_merge(c(nphon_prime_mean, nphon_prime_sd),
			   pattern = "{1} ({2})") |>
	cols_merge(c(nphon_target_mean, nphon_target_sd),
			   pattern = "{1} ({2})") |>
	cols_merge(c(lv_pp_mean, lv_pp_sd),
			   pattern = "{1} ({2})") |>
	cols_merge(c(lv_pt_mean, lv_pt_sd),
			   pattern = "{1} ({2})") |>
	cols_merge(c(duration_mean, duration_sd),
			   pattern = "{1} ({2})") |>
	cols_label(trial_type = "",
			   freq_prime_mean = "Prime",
			   freq_target_mean = "Target",
			   lv_pp_mean = "Prime-Prime",
			   lv_pt_mean = "Prime-Target",
			   duration_mean = "Duration (s)",
			   nphon_prime_mean = "Prime",
			   nphon_target_mean = "Target") |>
	tab_style(cell_text(style = "italic"),
			  list(cells_column_labels(),
			  	 cells_column_spanners(),
			  	 cells_grand_summary()))
```


